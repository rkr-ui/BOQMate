import io
import json
from typing import List, Dict, Any
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
from openpyxl.utils import get_column_letter

class ExcelExporter:
    def __init__(self):
        self.workbook = None
        self.worksheet = None
    
    def create_boq_excel(self, boq_items: List[Dict[str, Any]], filename: str) -> bytes:
        """Create Excel file with BOQ data"""
        try:
            # Create workbook and worksheet
            self.workbook = Workbook()
            self.worksheet = self.workbook.active
            self.worksheet.title = "Bill of Quantities"
            
            # Set up headers
            headers = ["Item", "Description", "Qty", "Unit", "Rate", "Amount"]
            header_row = 1
            
            # Style for headers
            header_font = Font(bold=True, color="FFFFFF")
            header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
            header_alignment = Alignment(horizontal="center", vertical="center")
            
            # Add headers
            for col, header in enumerate(headers, 1):
                cell = self.worksheet.cell(row=header_row, column=col, value=header)
                cell.font = header_font
                cell.fill = header_fill
                cell.alignment = header_alignment
            
            # Add data
            total_amount = 0
            for row, item in enumerate(boq_items, 2):
                self.worksheet.cell(row=row, column=1, value=item.get("Item", ""))
                self.worksheet.cell(row=row, column=2, value=item.get("Description", ""))
                self.worksheet.cell(row=row, column=3, value=item.get("Qty", 0))
                self.worksheet.cell(row=row, column=4, value=item.get("Unit", ""))
                self.worksheet.cell(row=row, column=5, value=item.get("Rate", 0))
                self.worksheet.cell(row=row, column=6, value=item.get("Amount", 0))
                
                total_amount += item.get("Amount", 0)
            
            # Add total row
            total_row = len(boq_items) + 2
            self.worksheet.cell(row=total_row, column=1, value="TOTAL")
            self.worksheet.cell(row=total_row, column=6, value=total_amount)
            
            # Style total row
            total_font = Font(bold=True)
            total_fill = PatternFill(start_color="D9E1F2", end_color="D9E1F2", fill_type="solid")
            for col in range(1, 7):
                cell = self.worksheet.cell(row=total_row, column=col)
                cell.font = total_font
                cell.fill = total_fill
            
            # Auto-adjust column widths
            for column in self.worksheet.columns:
                max_length = 0
                column_letter = get_column_letter(column[0].column)
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                self.worksheet.column_dimensions[column_letter].width = adjusted_width
            
            # Add borders
            thin_border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )
            
            for row in range(1, total_row + 1):
                for col in range(1, 7):
                    self.worksheet.cell(row=row, column=col).border = thin_border
            
            # Save to bytes
            excel_file = io.BytesIO()
            self.workbook.save(excel_file)
            excel_file.seek(0)
            
            return excel_file.getvalue()
            
        except Exception as e:
            raise Exception(f"Failed to create Excel file: {str(e)}")
    
    def create_summary_sheet(self, boq_items: List[Dict[str, Any]]) -> None:
        """Create a summary sheet with project information"""
        if not self.workbook:
            return
        
        # Create summary worksheet
        summary_sheet = self.workbook.create_sheet("Summary")
        
        # Add project information
        summary_sheet.cell(row=1, column=1, value="BOQMate - Bill of Quantities Summary")
        summary_sheet.cell(row=1, column=1).font = Font(bold=True, size=16)
        
        summary_sheet.cell(row=3, column=1, value="Generated by:")
        summary_sheet.cell(row=3, column=2, value="BOQMate AI")
        
        summary_sheet.cell(row=4, column=1, value="Total Items:")
        summary_sheet.cell(row=4, column=2, value=len(boq_items))
        
        total_amount = sum(item.get("Amount", 0) for item in boq_items)
        summary_sheet.cell(row=5, column=1, value="Total Amount:")
        summary_sheet.cell(row=5, column=2, value=f"${total_amount:,.2f}")
        
        # Auto-adjust column widths for summary
        for column in summary_sheet.columns:
            max_length = 0
            column_letter = get_column_letter(column[0].column)
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 30)
            summary_sheet.column_dimensions[column_letter].width = adjusted_width 