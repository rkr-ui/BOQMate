"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./utils/supabaseClient.js":
/*!*********************************!*\
  !*** ./utils/supabaseClient.js ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSupabaseAvailable: function() { return /* binding */ isSupabaseAvailable; },\n/* harmony export */   supabase: function() { return /* binding */ supabase; }\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"your-supabase-project-url\";\nconst supabaseAnonKey = \"your-supabase-anon-key\";\n// Mock Supabase client for development/testing\nconst createMockSupabaseClient = ()=>({\n        auth: {\n            getSession: async ()=>({\n                    data: {\n                        session: {\n                            user: {\n                                id: \"mock-user-id\",\n                                email: \"test@example.com\",\n                                phone: \"+1234567890\"\n                            }\n                        }\n                    }\n                }),\n            onAuthStateChange: (callback)=>{\n                // Mock subscription\n                return {\n                    data: {\n                        subscription: {\n                            unsubscribe: ()=>{}\n                        }\n                    }\n                };\n            },\n            signUp: async (param)=>{\n                let { email, password, phone, options } = param;\n                return {\n                    error: null,\n                    data: {\n                        user: {\n                            id: \"mock-user-id\",\n                            email,\n                            phone\n                        }\n                    }\n                };\n            },\n            signInWithPassword: async (param)=>{\n                let { email, password } = param;\n                return {\n                    error: null,\n                    data: {\n                        user: {\n                            id: \"mock-user-id\",\n                            email\n                        }\n                    }\n                };\n            },\n            signInWithOAuth: async (param)=>{\n                let { provider, options } = param;\n                // Simulate OAuth redirect\n                if (true) {\n                    window.location.href = options.redirectTo;\n                }\n                return {\n                    error: null\n                };\n            },\n            signInWithOtp: async (param)=>{\n                let { phone, options } = param;\n                // Mock OTP sending\n                console.log(\"Mock OTP sent to \".concat(phone));\n                return {\n                    error: null\n                };\n            },\n            verifyOtp: async (param)=>{\n                let { phone, token, type } = param;\n                // Mock OTP verification (accept any 6-digit code)\n                if (token && token.length === 6 && /^\\d+$/.test(token)) {\n                    return {\n                        error: null,\n                        data: {\n                            user: {\n                                id: \"mock-user-id\",\n                                phone\n                            }\n                        }\n                    };\n                }\n                return {\n                    error: {\n                        message: \"Invalid OTP\"\n                    }\n                };\n            },\n            resetPasswordForEmail: async (email, options)=>{\n                // Mock password reset email\n                console.log(\"Mock password reset email sent to \".concat(email));\n                return {\n                    error: null\n                };\n            },\n            updateUser: async (param)=>{\n                let { password } = param;\n                // Mock password update\n                console.log(\"Mock password updated\");\n                return {\n                    error: null\n                };\n            },\n            resend: async (param)=>{\n                let { type, email, options } = param;\n                // Mock resend verification email\n                console.log(\"Mock \".concat(type, \" email resent to \").concat(email));\n                return {\n                    error: null\n                };\n            },\n            signOut: async ()=>({\n                    error: null\n                })\n        }\n    });\n// Helper function to validate URL\nconst isValidUrl = (url)=>{\n    if (!url || url === \"your-supabase-project-url\") return false;\n    try {\n        new URL(url);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n// Use real Supabase if credentials are provided and valid, otherwise use mock\nconst supabase = isValidUrl(supabaseUrl) && supabaseAnonKey && supabaseAnonKey !== \"your-supabase-anon-key\" ? (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey) : createMockSupabaseClient();\n// Helper function to check if Supabase is available\nconst isSupabaseAvailable = ()=>{\n    return isValidUrl(supabaseUrl) && supabaseAnonKey && supabaseAnonKey !== \"your-supabase-anon-key\";\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/supabaseClient.js\n"));

/***/ })

});